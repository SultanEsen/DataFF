import streamlit as st
import pandas as pd
from pathlib import Path
from io import BytesIO

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
EXCEL_PATH = Path("Data.xlsx")  # Excel-—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö FF", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö FF")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if not EXCEL_PATH.exists():
    st.error(f"–§–∞–π–ª '{EXCEL_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–µ—Å—Ç–∏—Ç–µ Excel —Ä—è–¥–æ–º —Å app.py.")
    st.stop()

df = pd.read_excel(EXCEL_PATH)

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
# st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
# st.dataframe(df, use_container_width=True)

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
st.subheader("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

filters = {}
cols = st.columns(3)  # —Ç—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Ä—è–¥
for i, col_name in enumerate(df.columns):
    unique_vals = df[col_name].dropna().unique()
    if len(unique_vals) <= 50:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è "—É–¥–æ–±–Ω—ã—Ö" –∫–æ–ª–æ–Ω–æ–∫
        with cols[i % 3]:
            selected = st.multiselect(f"{col_name}", unique_vals)
            if selected:
                filters[col_name] = selected

filtered_df = df.copy()
for col, vals in filters.items():
    filtered_df = filtered_df[filtered_df[col].isin(vals)]

st.write(f"**–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫:** {len(filtered_df)} –∏–∑ {len(df)}")

# # === –í—ã–±–æ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–æ–ª–µ–π ===
# st.subheader("üìã –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
#
# columns_to_show = st.multiselect(
#     "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã",
#     options=filtered_df.columns.tolist(),
#     default=filtered_df.columns.tolist()[:5]
# )

# st.dataframe(filtered_df[columns_to_show], use_container_width=True)

# === –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ===
st.subheader("üìà –î–≤—É–º–µ—Ä–Ω–∞—è —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (Pivot Table)")

col1, col2, col3, col4 = st.columns(4)
with col1:
    row_field = st.selectbox("–°—Ç—Ä–æ–∫–∏", filtered_df.columns)
with col2:
    col_field = st.selectbox("–°—Ç–æ–ª–±—Ü—ã", filtered_df.columns)
with col3:
    value_field = st.selectbox("–ó–Ω–∞—á–µ–Ω–∏—è", filtered_df.columns)
with col4:
    agg_func = st.selectbox("–ê–≥—Ä–µ–≥–∞—Ü–∏—è", ["count", "sum", "mean", "max", "min"])

pivot_table = pd.pivot_table(
    filtered_df,
    index=row_field,
    columns=col_field,
    values=value_field,
    aggfunc=agg_func,
    fill_value=0
)

st.dataframe(pivot_table, use_container_width=True)

# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ===
def to_excel_bytes(df):
    output = BytesIO()
    df.to_excel(output, engine="openpyxl")
    return output.getvalue()

col_a, col_b = st.columns(2)
with col_a:
    st.download_button(
        "üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Excel)",
        data=to_excel_bytes(filtered_df),
        file_name="filtered_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

with col_b:
    st.download_button(
        "üìä –°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (Excel)",
        data=to_excel_bytes(pivot_table),
        file_name="pivot_table.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
